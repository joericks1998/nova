Module
(
body
=
[
ImportFrom
module
,
 
names
alias
name
)
]
level
Import
ClassDef
bases
Name
id
ctx
Load
keywords
FunctionDef
args
arguments
posonlyargs
arg
kwonlyargs
kw_defaults
defaults
Expr
value
Call
func
Attribute
Constant
attr
decorator_list
While
test
True
kind
b
keyword
YieldFrom
orelse
If
Compare
left
ops
Eq
comparators
Assign
targets
Store
False
type_ignores
vararg
kwarg
None
IfExp
Subscript
slice
Return
AugAssign
target
op
Add
Tuple
elts
List
IsNot
ListComp
elt
generators
comprehension
iter
ifs
UnaryOp
Not
operand
is_async
NotIn
For
Assert
msg
BinOp
Mod
right
In
GeneratorExp
asname
Starred
Raise
exc
Is
Gt
Slice
upper
Pow
FloorDiv
Lt
Yield
Pass
Dict
keys
values
BoolOp
And
Continue
Try
handlers
ExceptHandler
type
finalbody
Or
Sub
LtE
lower
GtE
With
items
withitem
context_expr
Break
NotEq
optional_vars
USub
LShift
Mult
.
Div
Lambda
Delete
Del
DictComp
key
step
JoinedStr
FormattedValue
conversion
-
AsyncFunctionDef
format_spec
Global
e
Set
Await
annotation
returns
RShift
BitOr
cause
BitAnd
+
SetComp
